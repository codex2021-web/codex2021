/*
 * TSLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package cloud.thoughtspotstaging.champagne.controllers;

import cloud.thoughtspotstaging.champagne.ApiHelper;
import cloud.thoughtspotstaging.champagne.AuthManager;
import cloud.thoughtspotstaging.champagne.Configuration;
import cloud.thoughtspotstaging.champagne.exceptions.ApiException;
import cloud.thoughtspotstaging.champagne.http.Headers;
import cloud.thoughtspotstaging.champagne.http.client.HttpCallback;
import cloud.thoughtspotstaging.champagne.http.client.HttpClient;
import cloud.thoughtspotstaging.champagne.http.client.HttpContext;
import cloud.thoughtspotstaging.champagne.http.request.HttpRequest;
import cloud.thoughtspotstaging.champagne.http.response.HttpResponse;
import cloud.thoughtspotstaging.champagne.models.DynamicResponse;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SessionController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public SessionController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public SessionController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Authenticate and login a user.
     * @param  username  Required parameter: Username
     * @param  password  Required parameter: Password
     * @param  contentType  Required parameter: Example: application/x-www-form-urlencoded
     * @param  accept  Required parameter: Example: application/json
     * @param  xRequestedBy  Required parameter: Example: ThoughtSpot
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse login(
            final String username,
            final String password,
            final String accessLevel,
            final long expiry,
            final String contentType,
            final String accept,
            final String xRequestedBy) throws ApiException, IOException {
        HttpRequest request = buildLoginRequest(username, password, accessLevel, expiry);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleLoginResponse(context);
    }

    public DynamicResponse getAuthToken(
            final String serviceSecret,
            final String userName,
            final String accessLevelEnum,
    final String contentType,
    final String accept,
    final String xRequestedBy) throws ApiException, IOException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/v1/session/v2/login");
System.out.println(queryBuilder.toString());
        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", "application/json");
        headers.add("X-Requested-By", "ThoughtSpot");
        headers.add("Content-Type", "application/x-www-form-urlencoded");
        headers.add("user-agent", BaseController.userAgent);

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        //formParameters.put("secret_key", serviceSecret);
        formParameters.put("password", serviceSecret);
        formParameters.put("username", userName);
        formParameters.put("access_level", accessLevelEnum);
       // formParameters.put("tokenexpirytime", 5);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleLoginResponse(context);
    }

    /**
     * Builds the HttpRequest object for login.
     */
    private HttpRequest buildLoginRequest(
            final String username,
            final String password,
            final String accessLevel,
            final long expiry) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/v1/session/v2/login");//"/session/login");

        /*//load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/x-www-form-urlencoded");
        //headers.add("Accept", "text/plain");
        headers.add("X-Requested-By", "ThoughtSpot");
        headers.add("user-agent", BaseController.userAgent);

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("username", username);
        formParameters.put("password", password);
        formParameters.put("id", "");
        formParameters.put("access_level", accessLevel);
        formParameters.put("rememberme", false);
        formParameters.put("tokenexpirytime", expiry);*/

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", "application/json");
        headers.add("X-Requested-By", "ThoughtSpot");
        headers.add("Content-Type", "application/x-www-form-urlencoded");
        headers.add("user-agent", BaseController.userAgent);

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        //formParameters.put("secret_key", serviceSecret);
        formParameters.put("password", password);
        formParameters.put("username", username);
        formParameters.put("access_level", accessLevel);
        formParameters.put("tokenexpirytime", 5);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for login.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleLoginResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * Logout current user.
     * @param  contentType  Required parameter: Example: application/x-www-form-urlencoded
     * @param  accept  Required parameter: Example: application/json
     * @param  xRequestedBy  Required parameter: Example: ThoughtSpot
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse logout(
            final String contentType,
            final String accept,
            final String xRequestedBy) throws ApiException, IOException {
        HttpRequest request = buildLogoutRequest(contentType, accept, xRequestedBy);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleLogoutResponse(context);
    }

    /**
     * Logout current user.
     * @param  contentType  Required parameter: Example: application/x-www-form-urlencoded
     * @param  accept  Required parameter: Example: application/json
     * @param  xRequestedBy  Required parameter: Example: ThoughtSpot
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> logoutAsync(
            final String contentType,
            final String accept,
            final String xRequestedBy) {
        return makeHttpCallAsync(() -> buildLogoutRequest(contentType, accept, xRequestedBy),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleLogoutResponse(context));
    }

    /**
     * Builds the HttpRequest object for logout.
     */
    private HttpRequest buildLogoutRequest(
            final String contentType,
            final String accept,
            final String xRequestedBy) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/v1/session/v2/logout");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", contentType);
        headers.add("Accept", accept);
        headers.add("UserName", "tsadmin");
        headers.add("X-Requested-By", xRequestedBy);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for logout.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleLogoutResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}